  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by Stan version 2.18.0
#include <stan/model/model_header.hpp>
namespace eight_schools_ncp_model_namespace {
static char* current_statement__;

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;


class eight_schools_ncp_model : public prob_grad {

 private:
  int J;
  std::vector<double> sigma;
  std::vector<double> y;
 
 public:
  ~eight_schools_ncp_model() { }
  
  static std::string model_name() { return "eight_schools_ncp_model"; }
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // dummy to suppress unused var warning
    try {
      current_statement__ = "\"eight_schools_ncp.stan\", line 2-2";
      vals_i__ = context__.vals_i__("J");
      J = vals_i__;
      
      current_statement__ = "\"eight_schools_ncp.stan\", line 4-4";
      vals_r__ = context__.vals_r__("sigma");
      for (size_t i_0__ = 0; i_0__ < J; i_0__++) sigma = vals_r__[i_0__];
      
      current_statement__ = "\"eight_schools_ncp.stan\", line 3-3";
      vals_r__ = context__.vals_r__("y");
      for (size_t i_0__ = 0; i_0__ < J; i_0__++) y = vals_r__[i_0__];
      current_statement__ = "\"eight_schools_ncp.stan\", line 2-2";
      check_greater_or_equal(function__, J, 0);
      current_statement__ = "\"eight_schools_ncp.stan\", line 4-4";
      for (size_t sym1 = 0; sym1 < J; sym1++)
        check_greater_or_equal(function__, sigma[sym1], 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string(e) + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

    }
  }
}
}

