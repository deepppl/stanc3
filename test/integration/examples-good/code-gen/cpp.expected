  $ ../../../../../install/default/bin/stanc --print-cpp gentest_mother1.stan

// Code generated by Stan version 2.18.0
#include <stan/model/model_header.hpp>
namespace gentest_mother1_model_model_namespace {
static int current_statement_begin__;

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo(const T0__& n, std::ostream* pstream__) ;

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo(const T0__& n, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 13-13";
    if (n Equals 0) {
      current_statement_loc__ = ""gentest_mother1.stan", line 13-13";
      return 1;
    } 
    current_statement_loc__ = ""gentest_mother1.stan", line 14-14";
    return n Times foo(n Minus 1);
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<double>& x,
    const std::vector<int>& x_int, std::ostream* pstream__) ;

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<double>& x,
    const std::vector<int>& x_int, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 29-29";
    std::vector<double> dydt;
    current_statement_loc__ = ""gentest_mother1.stan", line 29-29";
    
    current_statement_loc__ = ""gentest_mother1.stan", line 30-30";
    stan::model::rvalue(dydt,
        stan::model::cons_list(stan::model::index_uni(1),
        stan::model::nil_index_list()), "dydt"); = stan::model::rvalue(y,
                                                       stan::model::cons_list(stan::model::index_uni(2),
                                                       stan::model::nil_index_list()),
                                                       "y");;
    current_statement_loc__ = ""gentest_mother1.stan", line 31-31";
    stan::model::rvalue(dydt,
        stan::model::cons_list(stan::model::index_uni(2),
        stan::model::nil_index_list()), "dydt"); = Minus(stan::model::rvalue(y,
                                                             stan::model::cons_list(stan::model::index_uni(1),
                                                             stan::model::nil_index_list()),
                                                             "y");) Minus 
    stan::model::rvalue(theta,
        stan::model::cons_list(stan::model::index_uni(1),
        stan::model::nil_index_list()), "theta"); Times stan::model::rvalue(y,
                                                            stan::model::cons_list(stan::model::index_uni(2),
                                                            stan::model::nil_index_list()),
                                                            "y");;
    current_statement_loc__ = ""gentest_mother1.stan", line 32-32";
    return dydt;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <>
typename boost::math::tools::promote_args<>::type
foo_bar0(, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 36-36";
    return 0.0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_bar1(const T0__& x, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 40-40";
    return 1.0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_bar2(const T0__& x, const T1__& y, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 44-44";
    return 2.0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_lpmf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 48-48";
    return 1.0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_lcdf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 52-52";
    return 1.0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_lccdf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 56-56";
    return 1.0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__>
void
unit_normal_lp(const T0__& u, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 60-60";
    target = target Plus normal_log(u, 0, 1);
    {
      current_statement_loc__ = ""gentest_mother1.stan", line 61-61";
      
      current_statement_loc__ = ""gentest_mother1.stan", line 61-61";
      target = target Plus uniform(u, Minus(100), 100);
    }
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_1(const T0__& a, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 66-66";
    while (1) {
      current_statement_loc__ = ""gentest_mother1.stan", line 66-66";
      break;
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 67-67";
    while (0) {
      current_statement_loc__ = ""gentest_mother1.stan", line 67-67";
      continue;
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 70-70";
    for (size_t i = 1; i < 10; i++) 
      current_statement_loc__ = ""gentest_mother1.stan", line 70-70";
      break;
    current_statement_loc__ = ""gentest_mother1.stan", line 71-71";
    for (size_t i = 1; i < 10; i++) 
      current_statement_loc__ = ""gentest_mother1.stan", line 71-71";
      continue;
    current_statement_loc__ = ""gentest_mother1.stan", line 74-78";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 75-75";
        int b;
        current_statement_loc__ = ""gentest_mother1.stan", line 75-75";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 76-76";
        b = 5;
        current_statement_loc__ = ""gentest_mother1.stan", line 77-77";
        break;
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 81-85";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 82-84";
        if (0) {
          current_statement_loc__ = ""gentest_mother1.stan", line 82-82";
          break;
        } else current_statement_loc__ = ""gentest_mother1.stan", line 83-84";
        if (1) {
          current_statement_loc__ = ""gentest_mother1.stan", line 83-83";
          break;
        } else current_statement_loc__ = ""gentest_mother1.stan", line 84-84";
        break;
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 88-88";
    while (1) {
      current_statement_loc__ = ""gentest_mother1.stan", line 88-88";
      while (0) {
        current_statement_loc__ = ""gentest_mother1.stan", line 88-88";
        break;
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 91-93";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 92-92";
        for (size_t i = 1; i < 10; i++) 
          current_statement_loc__ = ""gentest_mother1.stan", line 92-92";
          break;
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 96-114";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 97-97";
        std::vector<std::vector<int>> vs;
        current_statement_loc__ = ""gentest_mother1.stan", line 97-97";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 98-98";
        int z;
        current_statement_loc__ = ""gentest_mother1.stan", line 98-98";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 99-102";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 100-100";
            z = 0;
            current_statement_loc__ = ""gentest_mother1.stan", line 101-101";
            break;
          }
        current_statement_loc__ = ""gentest_mother1.stan", line 103-106";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 104-104";
            z = 0;
            current_statement_loc__ = ""gentest_mother1.stan", line 105-105";
            continue;
          }
        current_statement_loc__ = ""gentest_mother1.stan", line 107-113";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 108-111";
            for (size_t vv = 0; vv < length(v); vv++) 
              {
                current_statement_loc__ = ""gentest_mother1.stan", line 109-109";
                z = 0;
                current_statement_loc__ = ""gentest_mother1.stan", line 110-110";
                break;
              }
            current_statement_loc__ = ""gentest_mother1.stan", line 112-112";
            z = 1;
          }
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 117-128";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 118-118";
        double z;
        current_statement_loc__ = ""gentest_mother1.stan", line 118-118";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 119-119";
        Eigen::Matrix<double, -1, -1> vs;
        current_statement_loc__ = ""gentest_mother1.stan", line 119-119";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 120-123";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 121-121";
            z = 0;
            current_statement_loc__ = ""gentest_mother1.stan", line 122-122";
            break;
          }
        current_statement_loc__ = ""gentest_mother1.stan", line 124-127";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 125-125";
            z = 3.1;
            current_statement_loc__ = ""gentest_mother1.stan", line 126-126";
            continue;
          }
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 131-142";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 132-132";
        double z;
        current_statement_loc__ = ""gentest_mother1.stan", line 132-132";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 133-133";
        Eigen::Matrix<double, -1, 1> vs;
        current_statement_loc__ = ""gentest_mother1.stan", line 133-133";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 134-137";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 135-135";
            z = 0;
            current_statement_loc__ = ""gentest_mother1.stan", line 136-136";
            break;
          }
        current_statement_loc__ = ""gentest_mother1.stan", line 138-141";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 139-139";
            z = 3.2;
            current_statement_loc__ = ""gentest_mother1.stan", line 140-140";
            continue;
          }
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 145-156";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 146-146";
        double z;
        current_statement_loc__ = ""gentest_mother1.stan", line 146-146";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 147-147";
        Eigen::Matrix<double, 1, -1> vs;
        current_statement_loc__ = ""gentest_mother1.stan", line 147-147";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 148-151";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 149-149";
            z = 0;
            current_statement_loc__ = ""gentest_mother1.stan", line 150-150";
            break;
          }
        current_statement_loc__ = ""gentest_mother1.stan", line 152-155";
        for (size_t v = 0; v < length(vs); v++) 
          {
            current_statement_loc__ = ""gentest_mother1.stan", line 153-153";
            z = 3.3;
            current_statement_loc__ = ""gentest_mother1.stan", line 154-154";
            continue;
          }
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 159-167";
    while (1) {
      {
        current_statement_loc__ = ""gentest_mother1.stan", line 160-160";
        int b;
        current_statement_loc__ = ""gentest_mother1.stan", line 160-160";
        
        current_statement_loc__ = ""gentest_mother1.stan", line 161-161";
        b = 5;
        {
          current_statement_loc__ = ""gentest_mother1.stan", line 163-163";
          int c;
          current_statement_loc__ = ""gentest_mother1.stan", line 163-163";
          
          current_statement_loc__ = ""gentest_mother1.stan", line 164-164";
          c = 6;
          current_statement_loc__ = ""gentest_mother1.stan", line 165-165";
          break;
        }
      }
    }
    current_statement_loc__ = ""gentest_mother1.stan", line 169-169";
    return 0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_2(const T0__& a, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 173-173";
    std::vector<int> vs;
    current_statement_loc__ = ""gentest_mother1.stan", line 173-173";
    
    current_statement_loc__ = ""gentest_mother1.stan", line 174-174";
    int y;
    current_statement_loc__ = ""gentest_mother1.stan", line 174-174";
    
    current_statement_loc__ = ""gentest_mother1.stan", line 175-175";
    for (size_t v = 0; v < length(vs); v++) 
      current_statement_loc__ = ""gentest_mother1.stan", line 175-175";
      y = v;
    current_statement_loc__ = ""gentest_mother1.stan", line 176-176";
    return 0;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__,
T1__>::type>
foo_3(const T0__& t, const T1__& n, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 180-180";
    return rep_array(t, n);
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_lp(const T0__& x, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 184-184";
    return x Plus target;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__>
void
foo_4(const T0__& x, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 188-188";
    reject(""user-specified rejection"");
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type
relative_diff(const T0__& x, const T1__& y, const T2__& max_,
              const T3__& min_, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 192-192";
    double abs_diff;
    current_statement_loc__ = ""gentest_mother1.stan", line 192-192";
    
    current_statement_loc__ = ""gentest_mother1.stan", line 193-193";
    double avg_scale;
    current_statement_loc__ = ""gentest_mother1.stan", line 193-193";
    
    current_statement_loc__ = ""gentest_mother1.stan", line 194-194";
    abs_diff = fabs(x Minus y);
    current_statement_loc__ = ""gentest_mother1.stan", line 195-195";
    avg_scale = fabs(x) Plus fabs(y) Divide 2;
    current_statement_loc__ = ""gentest_mother1.stan", line 196-197";
    if (abs_diff Divide avg_scale Greater max_) {
      current_statement_loc__ = ""gentest_mother1.stan", line 197-197";
      reject(""user-specified rejection, difference above "",
      max_,
      "" x:"",
      x,
      "" y:"",
      y);
    } 
    current_statement_loc__ = ""gentest_mother1.stan", line 198-199";
    if (abs_diff Divide avg_scale Less min_) {
      current_statement_loc__ = ""gentest_mother1.stan", line 199-199";
      reject(""user-specified rejection, difference below "",
      min_,
      "" x:"",
      x,
      "" y:"",
      y);
    } 
    current_statement_loc__ = ""gentest_mother1.stan", line 200-200";
    return abs_diff Divide avg_scale;
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
foo_5(const Eigen::Matrix<T0__, -1, 1>& shared_params,
      const Eigen::Matrix<T1__, -1, 1>& job_params,
      const std::vector<double>& data_r, const std::vector<int>& data_i,
      std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  int current_statement_begin__ = -1;
  try {
    current_statement_loc__ = ""gentest_mother1.stan", line 205-205";
    return Transpose(make_rowvec(1, 2, 3));
  } catch const std::exception& e) {
    stan::lang::rethrow_located(
    std::runtime_error(std::string(e) + e.what(), current_statement__);
// Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");

  }
}
class gentest_mother1_model_model : public prob_grad {

 private:
 
  gentest_mother1_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "gentest_mother1_model_model_namespace::gentest_mother1_model";
    (void) function__;  // dummy to suppress unused var warning
    vals_r__ = context__.vals_r("J");
    J = vals_r;
    
    vals_i__ = context__.vals_i("K");
    K = vals_i;
    
    vals_i__ = context__.vals_i("M");
    M = vals_i;
    
    vals_i__ = context__.vals_i("N");
    N = vals_i;
    
    vals_r__ = context__.vals_r("d_1d_row_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < N; i_1__++) 
        d_1d_row_vec = vals_r[i_0__][i_1__];
        
    vals_r__ = context__.vals_r("d_1d_simplex");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < N; i_1__++) 
        d_1d_simplex = vals_r[i_0__][i_1__];
        
    vals_r__ = context__.vals_r("d_1d_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < N; i_1__++) 
        d_1d_vec = vals_r[i_0__][i_1__];
        
    vals_r__ = context__.vals_r("d_3d_row_vec");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < N; i_3__++) 
            d_3d_row_vec = vals_r[i_0__][i_1__][i_2__][i_3__];
            
    vals_r__ = context__.vals_r("d_3d_simplex");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < N; i_3__++) 
            d_3d_simplex = vals_r[i_0__][i_1__][i_2__][i_3__];
            
    vals_r__ = context__.vals_r("d_3d_vec");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < N; i_3__++) 
            d_3d_vec = vals_r[i_0__][i_1__][i_2__][i_3__];
            
    vals_r__ = context__.vals_r("d_ar_mat");
    for (size_t i_0__ = 0; i_0__ < 5; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 4; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < 2; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < 3; i_3__++) 
            d_ar_mat = vals_r[i_0__][i_1__](i_2__, i_3__);
            
    vals_r__ = context__.vals_r("d_cfcov_33");
    for (size_t i_0__ = 0; i_0__ < 3; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 3; i_1__++) 
        d_cfcov_33 = vals_r(i_0__, i_1__);
        
    vals_r__ = context__.vals_r("d_cfcov_33_ar");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 3; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < 3; i_2__++) 
          d_cfcov_33_ar = vals_r[i_0__](i_1__, i_2__);
          
    vals_r__ = context__.vals_r("d_cfcov_54");
    for (size_t i_0__ = 0; i_0__ < 5; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 4; i_1__++) 
        d_cfcov_54 = vals_r(i_0__, i_1__);
        
    vals_i__ = context__.vals_i("d_int_1d_ar");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_int_1d_ar = vals_i[i_0__];
                                               
    vals_i__ = context__.vals_i("d_int_3d_ar");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          d_int_3d_ar = vals_i[i_0__][i_1__][i_2__];
          
    vals_r__ = context__.vals_r("d_real_1d_ar");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_real_1d_ar = vals_r[i_0__];
                                               
    vals_r__ = context__.vals_r("d_real_3d_ar");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          d_real_3d_ar = vals_r[i_0__][i_1__][i_2__];
          
    vals_r__ = context__.vals_r("d_row_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_row_vec = vals_r[i_0__];
                                               
    vals_r__ = context__.vals_r("d_simplex");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_simplex = vals_r[i_0__];
                                               
    vals_r__ = context__.vals_r("d_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_vec = vals_r[i_0__];
                                               
  }
 public: 
 
  
  ~gentest_mother1_model_model() { }
  
  static std::string model_name() { return "gentest_mother1_model"; }
  gentest_mother1_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "gentest_mother1_model_model_namespace::gentest_mother1_model";
    (void) function__;  // dummy to suppress unused var warning
    vals_r__ = context__.vals_r("J");
    J = vals_r;
    
    vals_i__ = context__.vals_i("K");
    K = vals_i;
    
    vals_i__ = context__.vals_i("M");
    M = vals_i;
    
    vals_i__ = context__.vals_i("N");
    N = vals_i;
    
    vals_r__ = context__.vals_r("d_1d_row_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < N; i_1__++) 
        d_1d_row_vec = vals_r[i_0__][i_1__];
        
    vals_r__ = context__.vals_r("d_1d_simplex");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < N; i_1__++) 
        d_1d_simplex = vals_r[i_0__][i_1__];
        
    vals_r__ = context__.vals_r("d_1d_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < N; i_1__++) 
        d_1d_vec = vals_r[i_0__][i_1__];
        
    vals_r__ = context__.vals_r("d_3d_row_vec");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < N; i_3__++) 
            d_3d_row_vec = vals_r[i_0__][i_1__][i_2__][i_3__];
            
    vals_r__ = context__.vals_r("d_3d_simplex");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < N; i_3__++) 
            d_3d_simplex = vals_r[i_0__][i_1__][i_2__][i_3__];
            
    vals_r__ = context__.vals_r("d_3d_vec");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < N; i_3__++) 
            d_3d_vec = vals_r[i_0__][i_1__][i_2__][i_3__];
            
    vals_r__ = context__.vals_r("d_ar_mat");
    for (size_t i_0__ = 0; i_0__ < 5; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 4; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < 2; i_2__++) 
          for (size_t i_3__ = 0; i_3__ < 3; i_3__++) 
            d_ar_mat = vals_r[i_0__][i_1__](i_2__, i_3__);
            
    vals_r__ = context__.vals_r("d_cfcov_33");
    for (size_t i_0__ = 0; i_0__ < 3; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 3; i_1__++) 
        d_cfcov_33 = vals_r(i_0__, i_1__);
        
    vals_r__ = context__.vals_r("d_cfcov_33_ar");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 3; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < 3; i_2__++) 
          d_cfcov_33_ar = vals_r[i_0__](i_1__, i_2__);
          
    vals_r__ = context__.vals_r("d_cfcov_54");
    for (size_t i_0__ = 0; i_0__ < 5; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < 4; i_1__++) 
        d_cfcov_54 = vals_r(i_0__, i_1__);
        
    vals_i__ = context__.vals_i("d_int_1d_ar");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_int_1d_ar = vals_i[i_0__];
                                               
    vals_i__ = context__.vals_i("d_int_3d_ar");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          d_int_3d_ar = vals_i[i_0__][i_1__][i_2__];
          
    vals_r__ = context__.vals_r("d_real_1d_ar");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_real_1d_ar = vals_r[i_0__];
                                               
    vals_r__ = context__.vals_r("d_real_3d_ar");
    for (size_t i_0__ = 0; i_0__ < K; i_0__++) 
      for (size_t i_1__ = 0; i_1__ < M; i_1__++) 
        for (size_t i_2__ = 0; i_2__ < N; i_2__++) 
          d_real_3d_ar = vals_r[i_0__][i_1__][i_2__];
          
    vals_r__ = context__.vals_r("d_row_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_row_vec = vals_r[i_0__];
                                               
    vals_r__ = context__.vals_r("d_simplex");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_simplex = vals_r[i_0__];
                                               
    vals_r__ = context__.vals_r("d_vec");
    for (size_t i_0__ = 0; i_0__ < N; i_0__++) d_vec = vals_r[i_0__];
                                               
  }
  }
  

Warning: deprecated language construct used in file gentest_mother1.stan, line 60, column 21:
   -------------------------------------------------
    58:  
    59:    void unit_normal_lp(real u) {
    60:      increment_log_prob(normal_log(u,0,1));
                              ^
    61:      u ~ uniform(-100,100);
    62:    }
   -------------------------------------------------

increment_log_prob(...); is deprecated and will be removed in the future. Use target += ...; instead.


Warning: deprecated language construct used in file gentest_mother1.stan, line 184, column 20:
   -------------------------------------------------
   182:  
   183:    real foo_lp(real x) {
   184:      return x + get_lp();
                             ^
   185:    }
   186:  
   -------------------------------------------------

get_lp() function is deprecated. It will be removed in a future release. Use target() instead.

